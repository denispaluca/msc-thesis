
@inproceedings{jiang_contractfuzzer_2018,
	title = {{ContractFuzzer}: Fuzzing Smart Contracts for Vulnerability Detection},
	url = {http://arxiv.org/abs/1807.03932},
	doi = {10.1145/3238147.3238177},
	shorttitle = {{ContractFuzzer}},
	abstract = {Decentralized cryptocurrencies feature the use of blockchain to transfer values among peers on networks without central agency. Smart contracts are programs running on top of the blockchain consensus protocol to enable people make agreements while minimizing trusts. Millions of smart contracts have been deployed in various decentralized applications. The security vulnerabilities within those smart contracts pose significant threats to their applications. Indeed, many critical security vulnerabilities within smart contracts on Ethereum platform have caused huge financial losses to their users. In this work, we present {ContractFuzzer}, a novel fuzzer to test Ethereum smart contracts for security vulnerabilities. {ContractFuzzer} generates fuzzing inputs based on the {ABI} specifications of smart contracts, defines test oracles to detect security vulnerabilities, instruments the {EVM} to log smart contracts runtime behaviors, and analyzes these logs to report security vulnerabilities. Our fuzzing of 6991 smart contracts has flagged more than 459 vulnerabilities with high precision. In particular, our fuzzing tool successfully detects the vulnerability of the {DAO} contract that leads to {USD} 60 million loss and the vulnerabilities of Parity Wallet that have led to the loss of \$30 million and the freezing of {USD} 150 million worth of Ether.},
	pages = {259--269},
	booktitle = {Proceedings of the 33rd {ACM}/{IEEE} International Conference on Automated Software Engineering},
	author = {Jiang, Bo and Liu, Ye and Chan, W. K.},
	urldate = {2023-03-21},
	date = {2018-09-03},
	eprinttype = {arxiv},
	eprint = {1807.03932 [cs]},
	keywords = {Computer Science - Cryptography and Security, Computer Science - Software Engineering},
	file = {arXiv Fulltext PDF:/home/denis/Zotero/storage/ZMPB2JDF/Jiang et al. - 2018 - ContractFuzzer Fuzzing Smart Contracts for Vulner.pdf:application/pdf;arXiv.org Snapshot:/home/denis/Zotero/storage/92MIDBSE/1807.html:text/html},
}

@inproceedings{guo_analysis_2022,
	title = {Analysis between different types of smart contract fuzzing},
	doi = {10.1109/CVIDLICCEA56201.2022.9825021},
	abstract = {The security problem within cryptocurrencies has high priority since it is published. The news of cryptocurrencies attack is keeping rising, and types of attacks are recorded as the classical security issues such as the most famous one decentralized autonomous organization ({DAO}) attack and which caused 3.6 million cryptocurrencies stolen. Thus, with the ripe fuzzing technique, using such testing skills on smart contracts to discover more bugs and leaks hidden in cryptocurrencies in a more automatic and intelligent approach could bring huge benefits. This paper is aimed to analyze the variation from the very first smart contract tools to the newest one, to discuss their pros and cons of them. This experiment mainly chose three fuzzing tools, several basic and classic smart contracts as tested material, and recorded the performance of fuzzing contracts of each tool. And the results are clear to show that even the newest fuzzer has a better performance than the other, but it is better to use it depending on the specific requirements while the rest of the two fuzzing tools has some advantages in some aspect. Therefore, this paper could make guidance for the later researcher to use exactly the type of fuzzer they need.},
	eventtitle = {2022 3rd International Conference on Computer Vision, Image and Deep Learning \& International Conference on Computer Engineering and Applications ({CVIDL} \& {ICCEA})},
	pages = {882--886},
	booktitle = {2022 3rd International Conference on Computer Vision, Image and Deep Learning \& International Conference on Computer Engineering and Applications ({CVIDL} \& {ICCEA})},
	author = {Guo, Xiang},
	date = {2022-05},
	keywords = {Codes, Computer bugs, Fuzzing, Smart contracts, Costs, Decentralized autonomous organization, Dynamic scheduling, Ethereum, Fuzzing methods, Fuzzing tools, Smart contract},
	file = {IEEE Xplore Abstract Record:/home/denis/Zotero/storage/ZXAX698P/9825021.html:text/html},
}

@inproceedings{nguyen_sfuzz_2020,
	location = {New York, {NY}, {USA}},
	title = {{sFuzz}: an efficient adaptive fuzzer for solidity smart contracts},
	isbn = {978-1-4503-7121-6},
	url = {https://doi.org/10.1145/3377811.3380334},
	doi = {10.1145/3377811.3380334},
	series = {{ICSE} '20},
	shorttitle = {{sFuzz}},
	abstract = {Smart contracts are Turing-complete programs that execute on the infrastructure of the blockchain, which often manage valuable digital assets. Solidity is one of the most popular programming languages for writing smart contracts on the Ethereum platform. Like traditional programs, smart contracts may contain vulnerabilities. Unlike traditional programs, smart contracts cannot be easily patched once they are deployed. It is thus important that smart contracts are tested thoroughly before deployment. In this work, we present an adaptive fuzzer for smart contracts on the Ethereum platform called {sFuzz}. Compared to existing Solidity fuzzers, {sFuzz} combines the strategy in the {AFL} fuzzer and an efficient lightweight multi-objective adaptive strategy targeting those hard-to-cover branches. {sFuzz} has been applied to more than 4 thousand smart contracts and the experimental results show that (1) {sFuzz} is efficient, e.g., two orders of magnitude faster than state-of-the-art tools; (2) {sFuzz} is effective in achieving high code coverage and discovering vulnerabilities; and (3) the different fuzzing strategies in {sFuzz} complement each other.},
	pages = {778--788},
	booktitle = {Proceedings of the {ACM}/{IEEE} 42nd International Conference on Software Engineering},
	publisher = {Association for Computing Machinery},
	author = {Nguyen, Tai D. and Pham, Long H. and Sun, Jun and Lin, Yun and Minh, Quang Tran},
	urldate = {2023-03-21},
	date = {2020-10-01},
}

@inproceedings{zhang_ethploit_2020,
	title = {{EthPloit}: From Fuzzing to Efficient Exploit Generation against Smart Contracts},
	doi = {10.1109/SANER48275.2020.9054822},
	shorttitle = {{EthPloit}},
	abstract = {Smart contracts, programs running on blockchain systems, leverage diverse decentralized applications ({DApps}). Unfortunately, well-known smart contract platforms, Ethereum for example, face serious security problems. Exploits to contracts may cause enormous financial losses, which emphasize the importance of smart contract testing. However, current exploit generation tools have difficulty to solve hard constraints in execution paths and cannot simulate the blockchain behaviors very well. These problems cause a loss of coverage and accuracy of exploit generation. To overcome the problems, we design and implement {EthPloit}, a smart contract exploit generator based on fuzzing. {EthPloit} adopts static taint analysis to generate exploit-targeted transaction sequences, a dynamic seed strategy to pass hard constraints and an instrumented Ethereum Virtual Machine to simulate blockchain behaviors. We evaluate {EthPloit} on 45,308 smart contracts and discovered 554 exploitable contracts. {EthPloit} automatically generated 644 exploits without any false positive and 306 of them cannot be generated by previous exploit generation tools.},
	eventtitle = {2020 {IEEE} 27th International Conference on Software Analysis, Evolution and Reengineering ({SANER})},
	pages = {116--126},
	booktitle = {2020 {IEEE} 27th International Conference on Software Analysis, Evolution and Reengineering ({SANER})},
	author = {Zhang, Qingzhao and Wang, Yizhuo and Li, Juanru and Ma, Siqi},
	date = {2020-02},
	note = {{ISSN}: 1534-5351},
	keywords = {fuzzing, Fuzzing, smart contract, Smart contracts, Decentralized applications, exploitation, Generators, Instruments, Software, Virtual machining},
	file = {IEEE Xplore Abstract Record:/home/denis/Zotero/storage/Q42TMEF5/9054822.html:text/html},
}

@inproceedings{wustholz_harvey_2020,
	location = {New York, {NY}, {USA}},
	title = {Harvey: a greybox fuzzer for smart contracts},
	isbn = {978-1-4503-7043-1},
	url = {https://doi.org/10.1145/3368089.3417064},
	doi = {10.1145/3368089.3417064},
	series = {{ESEC}/{FSE} 2020},
	shorttitle = {Harvey},
	abstract = {We present Harvey, an industrial greybox fuzzer for smart contracts, which are programs managing accounts on a blockchain. Greybox fuzzing is a lightweight test-generation approach that effectively detects bugs and security vulnerabilities. However, greybox fuzzers randomly mutate program inputs to exercise new paths; this makes it challenging to cover code that is guarded by narrow checks. Moreover, most real-world smart contracts transition through many different states during their lifetime, e.g., for every bid in an auction. To explore these states and thereby detect deep vulnerabilities, a greybox fuzzer would need to generate sequences of contract transactions, e.g., by creating bids from multiple users, while keeping the search space and test suite tractable. In this paper, we explain how Harvey alleviates both challenges with two key techniques. First, Harvey extends standard greybox fuzzing with a method for predicting new inputs that are more likely to cover new paths or reveal vulnerabilities in smart contracts. Second, it fuzzes transaction sequences in a targeted and demand-driven way. We have evaluated our approach on 27 real-world contracts. Our experiments show that our techniques significantly increase Harvey's effectiveness in achieving high coverage and detecting vulnerabilities, in most cases orders-of-magnitude faster.},
	pages = {1398--1409},
	booktitle = {Proceedings of the 28th {ACM} Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
	publisher = {Association for Computing Machinery},
	author = {Wüstholz, Valentin and Christakis, Maria},
	urldate = {2023-03-21},
	date = {2020-11-08},
	keywords = {smart contracts, automated testing, greybox fuzzing},
	file = {Submitted Version:/home/denis/Zotero/storage/5M7PU8WC/Wüstholz and Christakis - 2020 - Harvey a greybox fuzzer for smart contracts.pdf:application/pdf},
}

@inproceedings{huang_eosfuzzer_2021,
	location = {New York, {NY}, {USA}},
	title = {{EOSFuzzer}: Fuzzing {EOSIO} Smart Contracts for Vulnerability Detection},
	isbn = {978-1-4503-8819-1},
	url = {https://doi.org/10.1145/3457913.3457920},
	doi = {10.1145/3457913.3457920},
	series = {Internetware '20},
	shorttitle = {{EOSFuzzer}},
	abstract = {{EOSIO} is one typical public blockchain platform. It is scalable in terms of transaction speeds and has a growing ecosystem supporting smart contracts and decentralized applications. However, the vulnerabilities within the {EOSIO} smart contracts have led to serious attacks, which caused serious financial loss to its end users. In this work, we systematically analyzed three typical {EOSIO} smart contract vulnerabilities and their related attacks. Then we presented {EOSFuzzer}, a general black-box fuzzing framework to detect vulnerabilities within {EOSIO} smart contracts. In particular, {EOSFuzzer} proposed effective attacking scenarios and test oracles for {EOSIO} smart contract fuzzing. Our fuzzing experiment on 3963 {EOSIO} smart contracts shows that {EOSFuzzer} is both effective and efficient to detect {EOSIO} smart contract vulnerabilities with high accuracy.},
	pages = {99--109},
	booktitle = {Proceedings of the 12th Asia-Pacific Symposium on Internetware},
	publisher = {Association for Computing Machinery},
	author = {Huang, Yuhe and Jiang, Bo and Chan, W. K.},
	urldate = {2023-03-21},
	date = {2021-07-21},
	keywords = {Fuzzing, Smart contract, Blockchain, Vulnerability detection},
	file = {Submitted Version:/home/denis/Zotero/storage/SBD8JKRL/Huang et al. - 2021 - EOSFuzzer Fuzzing EOSIO Smart Contracts for Vulne.pdf:application/pdf},
}

@inproceedings{ding_hfcontractfuzzer_2021,
	location = {New York, {NY}, {USA}},
	title = {{HFContractFuzzer}: Fuzzing Hyperledger Fabric Smart Contracts for Vulnerability Detection},
	isbn = {978-1-4503-9053-8},
	url = {https://doi.org/10.1145/3463274.3463351},
	doi = {10.1145/3463274.3463351},
	series = {{EASE} 2021},
	shorttitle = {{HFContractFuzzer}},
	abstract = {With its unique advantages such as decentralization and immutability, blockchain technology has been widely used in various fields in recent years. The smart contract running on the blockchain is also playing an increasingly important role in decentralized application scenarios. Therefore, the automatic detection of security vulnerabilities in smart contracts has become an urgent problem in the application of blockchain technology. Hyperledger Fabric is a smart contract platform based on enterprise-level licensed distributed ledger technology. However, the research on the vulnerability detection technology of Hyperledger Fabric smart contracts is still in its infancy. In this paper, we propose {HFContractFuzzer}, a method based on Fuzzing technology to detect Hyperledger Fabric smart contracts, which combines a Fuzzing tool for golang named go-fuzz and smart contracts written by golang. We use {HFContractFuzzer} to detect vulnerabilities in five contracts from typical sources and discover that four of them have security vulnerabilities, proving the effectiveness of the proposed method.},
	pages = {321--328},
	booktitle = {Evaluation and Assessment in Software Engineering},
	publisher = {Association for Computing Machinery},
	author = {Ding, Mengjie and Li, Peiru and Li, Shanshan and Zhang, He},
	urldate = {2023-03-21},
	date = {2021-06-21},
	keywords = {Fuzzing, Blockchain, Hyperledger Fabric, Security Vulnerability, Smart Contract},
	file = {Submitted Version:/home/denis/Zotero/storage/V6S9HF44/Ding et al. - 2021 - HFContractFuzzer Fuzzing Hyperledger Fabric Smart.pdf:application/pdf},
}

@article{ashraf_gasfuzzer_2020,
	title = {{GasFuzzer}: Fuzzing Ethereum Smart Contract Binaries to Expose Gas-Oriented Exception Security Vulnerabilities},
	volume = {8},
	issn = {2169-3536},
	doi = {10.1109/ACCESS.2020.2995183},
	shorttitle = {{GasFuzzer}},
	abstract = {Ethereum is a kind of blockchain platform where developers may develop and run programs called smart contracts. It inherently relies on gas consumption within a specified allowance to constrain code execution, making every instruction along an execution path to be a location for raising an exception. In this paper, we present {GasFuzzer}, the first work in exploring the effects of gas allowance manipulation to expose gas-oriented exception security vulnerabilities. {GasFuzzer} consists of two phases. The first phase introduces a gas-greedy strategy to favor transactions having higher gas consumption for mutation to obtain test transactions with different gas consumptions. The second phase introduces a novel notion of fractional gas consumption coverage and a novel gas-leveling strategy. It applies them to mutate the gas allowances of some of these transactions resulting in the highest gas consumptions produced in the first phase followed by applying these allowance-mutated transactions together with those which remained non-mutated to fuzz test the smart contract. We report an evaluation of {GasFuzzer} via an experiment on 3170 real-world smart contracts deployed on the public Ethereum Blockchain between October 2017 and July 2019. The findings show that {GasFuzzer} with gas-greedy strategy can detect more Exceptions Disorder kind of security vulnerabilities (7 more cases) than the previous state-of-the-art black-box fuzzer, and {GasFuzzer} with gas-leveling strategy and gas coverage criterion can detect 6 additional cases of Exceptions Disorder security vulnerabilities, which is significant.},
	pages = {99552--99564},
	journaltitle = {{IEEE} Access},
	author = {Ashraf, Imran and Ma, Xiaoxue and Jiang, Bo and Chan, W. K.},
	date = {2020},
	note = {Conference Name: {IEEE} Access},
	keywords = {fuzzing, Fuzzing, smart contract, software testing, Ethereum, Virtual machining, Blockchain, atomicity violation, Computer science, Fuzzer, gas consumption, security vulnerability, vulnerability triggering},
	file = {IEEE Xplore Abstract Record:/home/denis/Zotero/storage/DDXQAIV4/9094680.html:text/html;IEEE Xplore Full Text PDF:/home/denis/Zotero/storage/PLYRGWUY/Ashraf et al. - 2020 - GasFuzzer Fuzzing Ethereum Smart Contract Binarie.pdf:application/pdf},
}

@inproceedings{pani_smart_2022,
	title = {Smart Contract Fuzzing for Enterprises: The Language Agnostic Way},
	doi = {10.1109/COMSNETS53615.2022.9668512},
	shorttitle = {Smart Contract Fuzzing for Enterprises},
	abstract = {Blockchain based applications backed by smart contracts are becoming increasingly popular in various domains. Smart contracts are vulnerable to attacks due to bugs in them and such attacks resulted in huge monetary losses, disruption in operation and so on in the past. Fuzz testing is one of the prominent methods used for identifying bugs in blockchain smart contracts. Multiple fuzzers are used for fuzzing smart contracts written in different programming languages. However, maintenance of multiple fuzzers become prohibitively difficult in an enterprise {DevOps} setup, in terms of skills, time, and efforts required in patching and keeping them up to date. Hence, we propose a novel vulnerability detection framework which uses a single fuzzer to fuzz smart contracts written in different programming languages, using {LLVM} {IR}. In this paper, we validated the proposed framework by testing Hyperledger Fabric smart contracts using fuzzing tools {AFL}++ and Honggfuzz and presented the results.},
	eventtitle = {2022 14th International Conference on {COMmunication} Systems \& {NETworkS} ({COMSNETS})},
	pages = {1--6},
	booktitle = {2022 14th International Conference on {COMmunication} Systems \& {NETworkS} ({COMSNETS})},
	author = {Pani, Siddhasagar and Nallagonda, Harshita Vani and Prakash, Saumya and R, Vigneswaran and Medicherla, Raveendra Kumar and A, Rajan M},
	date = {2022-01},
	note = {{ISSN}: 2155-2509},
	keywords = {Computer bugs, Fuzzing, Smart contracts, Blockchain, Computer languages, Distributed ledger, Fabrics, {LLVM} {IR}, Maintenance engineering, Smart Contracts},
}

@inproceedings{liao_soliaudit_2019,
	title = {{SoliAudit}: Smart Contract Vulnerability Assessment Based on Machine Learning and Fuzz Testing},
	doi = {10.1109/IOTSMS48152.2019.8939256},
	shorttitle = {{SoliAudit}},
	abstract = {Blockchain has flourished in recent years. As a decentralized system architecture, smart contracts give the blockchain a user-defined logical concept. The smart contract is an executable program that can be used for automatic transactions on the Ethereum blockchain. In 2016, the {DAO} attack resulted in the theft of 60M {USD} due to unsafe smart contracts. Smart contracts are vulnerable to hacking because they are difficult to patch and there is a lack of assessment standards for ensuring their quality. Hackers can exploit the vulnerabilities in smart contracts when they have been published on Ethereum. Thus, this study presents {SoliAudit} (Solidity Audit), which uses machine learning and fuzz testing for smart contract vulnerability assessment. {SoliAudit} employs machine learning technology using Solidity machine code as learning features to verify 13 kinds of vulnerabilities, which have been listed as Top 10 threats by an open security organization. We also created a gray-box fuzz testing mechanism, which consists of a fuzzer contract and a simulated blockchain environment for on-line transaction verification. Different from previous research systems, {SoliAudit} can detect vulnerabilities without expert knowledge or predefined patterns. We subjected {SoliAudit} to real-world evaluation by using near 18k smart contracts from the Ethereum blockchain and Capture-the-Flag samples. The results show that the accuracy of {SoliAudit} can reach to 90\% and the fuzzing can help identify potential weaknesses, including reentrancy and arithmetic overflow problems.},
	eventtitle = {2019 Sixth International Conference on Internet of Things: Systems, Management and Security ({IOTSMS})},
	pages = {458--465},
	booktitle = {2019 Sixth International Conference on Internet of Things: Systems, Management and Security ({IOTSMS})},
	author = {Liao, Jian-Wei and Tsai, Tsung-Ta and He, Chia-Kang and Tien, Chin-Wei},
	date = {2019-10},
	keywords = {Fuzzing, Smart contracts, Smart contract, Blockchain, Feature extraction, fuzz testing, machine learning, Machine learning, Security, vulnerability},
	file = {IEEE Xplore Abstract Record:/home/denis/Zotero/storage/34WWBVJ3/8939256.html:text/html},
}

@inproceedings{mossberg_manticore_2019,
	title = {Manticore: A User-Friendly Symbolic Execution Framework for Binaries and Smart Contracts},
	doi = {10.1109/ASE.2019.00133},
	shorttitle = {Manticore},
	abstract = {An effective way to maximize code coverage in software tests is through dynamic symbolic execution-a technique that uses constraint solving to systematically explore a program's state space. We introduce an open-source dynamic symbolic execution framework called Manticore for analyzing binaries and Ethereum smart contracts. Manticore's flexible architecture allows it to support both traditional and exotic execution environments, and its {API} allows users to customize their analysis. Here, we discuss Manticore's architecture and demonstrate the capabilities we have used to find bugs and verify the correctness of code for our commercial clients.},
	eventtitle = {2019 34th {IEEE}/{ACM} International Conference on Automated Software Engineering ({ASE})},
	pages = {1186--1189},
	booktitle = {2019 34th {IEEE}/{ACM} International Conference on Automated Software Engineering ({ASE})},
	author = {Mossberg, Mark and Manzano, Felipe and Hennenfent, Eric and Groce, Alex and Grieco, Gustavo and Feist, Josselin and Brunson, Trent and Dinaburg, Artem},
	date = {2019-11},
	note = {{ISSN}: 2643-1572},
	keywords = {Benchmark testing, smart contract, Smart contracts, Computer architecture, Engines, ethereum, manticore, mcore, symbolic execution, Tools, Weapons},
	file = {IEEE Xplore Abstract Record:/home/denis/Zotero/storage/GN8XWGWQ/8952204.html:text/html;Submitted Version:/home/denis/Zotero/storage/RLLKVWIX/Mossberg et al. - 2019 - Manticore A User-Friendly Symbolic Execution Fram.pdf:application/pdf},
}

@inproceedings{he_learning_2019,
	location = {New York, {NY}, {USA}},
	title = {Learning to Fuzz from Symbolic Execution with Application to Smart Contracts},
	isbn = {978-1-4503-6747-9},
	url = {https://doi.org/10.1145/3319535.3363230},
	doi = {10.1145/3319535.3363230},
	series = {{CCS} '19},
	abstract = {Fuzzing and symbolic execution are two complementary techniques for discovering software vulnerabilities. Fuzzing is fast and scalable, but can be ineffective when it fails to randomly select the right inputs. Symbolic execution is thorough but slow and often does not scale to deep program paths with complex path conditions. In this work, we propose to learn an effective and fast fuzzer from symbolic execution, by phrasing the learning task in the framework of imitation learning. During learning, a symbolic execution expert generates a large number of quality inputs improving coverage on thousands of programs. Then, a fuzzing policy, represented with a suitable architecture of neural networks, is trained on the generated dataset. The learned policy can then be used to fuzz new programs. We instantiate our approach to the problem of fuzzing smart contracts, a domain where contracts often implement similar functionality (facilitating learning) and security is of utmost importance. We present an end-to-end system, {ILF} (for Imitation Learning based Fuzzer), and an extensive evaluation over {\textgreater}18K contracts. Our results show that {ILF} is effective: (i) it is fast, generating 148 transactions per second, (ii) it outperforms existing fuzzers (e.g., achieving 33\% more coverage), and (iii) it detects more vulnerabilities than existing fuzzing and symbolic execution tools for Ethereum.},
	pages = {531--548},
	booktitle = {Proceedings of the 2019 {ACM} {SIGSAC} Conference on Computer and Communications Security},
	publisher = {Association for Computing Machinery},
	author = {He, Jingxuan and Balunović, Mislav and Ambroladze, Nodar and Tsankov, Petar and Vechev, Martin},
	urldate = {2023-03-22},
	date = {2019-11-06},
	keywords = {fuzzing, smart contracts, symbolic execution, imitation learning},
}

@inproceedings{choi_smartian_2022,
	location = {Melbourne, Australia},
	title = {{SMARTIAN}: enhancing smart contract fuzzing with static and dynamic data-flow analyses},
	isbn = {978-1-66540-337-5},
	url = {https://dl.acm.org/doi/10.1109/ASE51524.2021.9678888},
	doi = {10.1109/ASE51524.2021.9678888},
	series = {{ASE} '21},
	shorttitle = {{SMARTIAN}},
	abstract = {Unlike traditional software, smart contracts have the unique organization in which a sequence of transactions shares persistent states. Unfortunately, such a characteristic makes it difficult for existing fuzzers to find out critical transaction sequences. To tackle this challenge, we employ both static and dynamic analyses for fuzzing smart contracts. First, we statically analyze smart contract bytecodes to predict which transaction sequences will lead to effective testing, and figure out if there is a certain constraint that each transaction should satisfy. Such information is then passed to the fuzzing phase and used to construct an initial seed corpus. During a fuzzing campaign, we perform a lightweight dynamic data-flow analysis to collect data-flow-based feedback to effectively guide fuzzing. We implement our ideas on a practical open-source fuzzer, named Smartian. Smartian can discover bugs in real-world smart contracts without the need for the source code. Our experimental results show that Smartian is more effective than existing state-of-the-art tools in finding known {CVEs} from real-world contracts. Smartian also outperforms other tools in terms of code coverage.},
	pages = {227--239},
	booktitle = {Proceedings of the 36th {IEEE}/{ACM} International Conference on Automated Software Engineering},
	publisher = {{IEEE} Press},
	author = {Choi, Jaeseung and Kim, Doyeon and Kim, Soomin and Grieco, Gustavo and Groce, Alex and Cha, Sang Kil},
	urldate = {2023-03-29},
	date = {2022-06-24},
	file = {Full Text PDF:/home/denis/Zotero/storage/DSHWMRGU/Choi et al. - 2022 - SMARTIAN enhancing smart contract fuzzing with st.pdf:application/pdf},
}

@article{rautenberg_case_2022,
	title = {A Case Study of Security Vulnerabilities in Smart Contracts},
	url = {https://www.net.in.tum.de/fileadmin/TUM/NET/NET-2022-11-1/NET-2022-11-1_10.pdf},
	doi = {10.2313/NET-2022-11-1_10},
	abstract = {Ethereum is the ﬁrst blockchain network that introduced smart contracts which is code that can be executed on a distributed and publicly visible ledger. This makes a trustless and secure system of transaction possible that can not be altered after execution. As a result handling transactions and contracts is signiﬁcantly improved no matter if the data being processed is tangible or intangible. To ensure this system is appropriate for use in a large scale it is important to analyze the security of it, what possible vulnerabilities the programming language has and how to minimize them which we conclude in a case study that refers to related work and combines all the conclusions. Subsequently we come to the deduction that Turing Completeness is rarely needed in terms of functionality in smart contract programming languages and rather harms the security of it.},
	author = {Rautenberg, Marvin},
	editora = {Architectures, Chair Of Network},
	editoratype = {collaborator},
	urldate = {2023-04-02},
	date = {2022},
	langid = {english},
	note = {Medium: {PDF}
Publisher: Chair of Network Architectures and Services, School of Computation, Information and Technology, Technical University of Munich},
	file = {Rautenberg - 2022 - A Case Study of Security Vulnerabilities in Smart .pdf:/home/denis/Zotero/storage/5GJ7FHWF/Rautenberg - 2022 - A Case Study of Security Vulnerabilities in Smart .pdf:application/pdf},
}

@online{noauthor_automated_nodate,
	title = {Automated testing for Algorand smart contracts, part 1},
	url = {https://www.codecapers.com.au/automated-testing-algorand-1/},
	urldate = {2023-05-03},
	file = {Automated testing for Algorand smart contracts, part 1:/home/denis/Zotero/storage/XYAFNQI8/automated-testing-algorand-1.html:text/html},
}

@online{noauthor_automated_nodate-1,
	title = {Automated testing for Algorand smart contracts, part 2},
	url = {https://www.codecapers.com.au/automated-testing-algorand-2/},
	urldate = {2023-05-03},
	file = {Automated testing for Algorand smart contracts, part 2:/home/denis/Zotero/storage/II8LVLTC/automated-testing-algorand-2.html:text/html},
}

@online{noauthor_automated_nodate-2,
	title = {Automated testing for Algorand smart contracts, part 3},
	url = {https://www.codecapers.com.au/automated-testing-algorand-3/},
	urldate = {2023-05-03},
	file = {Automated testing for Algorand smart contracts, part 3:/home/denis/Zotero/storage/IIX5U4H8/automated-testing-algorand-3.html:text/html},
}

@online{noauthor_abi_nodate,
	title = {{ABI} details - Algorand Developer Portal},
	url = {https://developer.algorand.org/docs/get-details/dapps/smart-contracts/ABI/},
	abstract = {Algorand Developer Docs, {SDKs}, {REST} {APIs}, {CLI} tools, ecosystem projects, metrics dashboard and sample code, how-tos, and news from the Algorand developer community},
	urldate = {2023-05-09},
	langid = {english},
	file = {Snapshot:/home/denis/Zotero/storage/23VDCVT8/ABI.html:text/html},
}

@online{noauthor_binary_2014,
	title = {Binary fuzzing strategies: what works, what doesn't},
	url = {https://lcamtuf.blogspot.com/2014/08/binary-fuzzing-strategies-what-works.html},
	shorttitle = {Binary fuzzing strategies},
	titleaddon = {lcamtuf's old blog},
	urldate = {2023-05-21},
	date = {2014-08-08},
	file = {Blogspot Snapshot:/home/denis/Zotero/storage/Z54IREAX/binary-fuzzing-strategies-what-works.html:text/html},
}

@online{noauthor_american_nodate,
	title = {american fuzzy lop},
	url = {https://lcamtuf.coredump.cx/afl/},
	urldate = {2023-05-21},
	file = {american fuzzy lop:/home/denis/Zotero/storage/8CB9ZGX4/afl.html:text/html},
}

@article{natella_stateafl_2022,
	title = {{StateAFL}: Greybox fuzzing for stateful network servers},
	volume = {27},
	issn = {1573-7616},
	url = {https://doi.org/10.1007/s10664-022-10233-3},
	doi = {10.1007/s10664-022-10233-3},
	shorttitle = {{StateAFL}},
	abstract = {Fuzzing network servers is a technical challenge, since the behavior of the target server depends on its state over a sequence of multiple messages. Existing solutions are costly and difficult to use, as they rely on manually-customized artifacts such as protocol models, protocol parsers, and learning frameworks. The aim of this work is to develop a greybox fuzzer ({StateAFL}) for network servers that only relies on lightweight analysis of the target program, with no manual customization, in a similar way to what the {AFL} fuzzer achieved for stateless programs. The proposed fuzzer instruments the target server at compile-time, to insert probes on memory allocations and network I/O operations. At run-time, it infers the current protocol state of the target server by taking snapshots of long-lived memory areas, and by applying a fuzzy hashing algorithm (Locality-Sensitive Hashing) to map memory contents to a unique state identifier. The fuzzer incrementally builds a protocol state machine for guiding fuzzing. We implemented and released {StateAFL} as open-source software. As a basis for reproducible experimentation, we integrated {StateAFL} with a large set of network servers for popular protocols, with no manual customization to accomodate for the protocol. The experimental results show that the fuzzer can be applied with no manual customization on a large set of network servers for popular protocols, and that it can achieve comparable, or even better code coverage and bug detection than customized fuzzing. Moreover, our qualitative analysis shows that states inferred from memory better reflect the server behavior than only using response codes from messages.},
	pages = {191},
	number = {7},
	journaltitle = {Empirical Software Engineering},
	shortjournal = {Empir Software Eng},
	author = {Natella, Roberto},
	urldate = {2023-05-30},
	date = {2022-10-04},
	langid = {english},
	keywords = {Fuzzing, Security, Network servers},
	file = {Full Text PDF:/home/denis/Zotero/storage/HFBLY792/Natella - 2022 - StateAFL Greybox fuzzing for stateful network ser.pdf:application/pdf},
}

@inproceedings{grieco_echidna_2020,
	location = {Virtual Event {USA}},
	title = {Echidna: effective, usable, and fast fuzzing for smart contracts},
	isbn = {978-1-4503-8008-9},
	url = {https://dl.acm.org/doi/10.1145/3395363.3404366},
	doi = {10.1145/3395363.3404366},
	shorttitle = {Echidna},
	eventtitle = {{ISSTA} '20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis},
	pages = {557--560},
	booktitle = {Proceedings of the 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis},
	publisher = {{ACM}},
	author = {Grieco, Gustavo and Song, Will and Cygan, Artur and Feist, Josselin and Groce, Alex},
	urldate = {2023-06-03},
	date = {2020-07-18},
	langid = {english},
	file = {Full Text PDF:/home/denis/Zotero/storage/RNJFUEBM/Grieco et al. - 2020 - Echidna effective, usable, and fast fuzzing for s.pdf:application/pdf},
}

@inproceedings{nguyen_sfuzz_2020-1,
	location = {Seoul South Korea},
	title = {{sFuzz}: an efficient adaptive fuzzer for solidity smart contracts},
	isbn = {978-1-4503-7121-6},
	url = {https://dl.acm.org/doi/10.1145/3377811.3380334},
	doi = {10.1145/3377811.3380334},
	shorttitle = {{sFuzz}},
	eventtitle = {{ICSE} '20: 42nd International Conference on Software Engineering},
	pages = {778--788},
	booktitle = {Proceedings of the {ACM}/{IEEE} 42nd International Conference on Software Engineering},
	publisher = {{ACM}},
	author = {Nguyen, Tai D. and Pham, Long H. and Sun, Jun and Lin, Yun and Minh, Quang Tran},
	urldate = {2023-06-06},
	date = {2020-06-27},
	langid = {english},
	file = {Full Text PDF:/home/denis/Zotero/storage/PTMF8TUB/Nguyen et al. - 2020 - sFuzz an efficient adaptive fuzzer for solidity s.pdf:application/pdf},
}

@misc{chen_algorand_2017,
	title = {Algorand},
	url = {http://arxiv.org/abs/1607.01341},
	doi = {10.48550/arXiv.1607.01341},
	abstract = {A public ledger is a tamperproof sequence of data that can be read and augmented by everyone. Public ledgers have innumerable and compelling uses. They can secure, in plain sight, all kinds of transactions ---such as titles, sales, and payments--- in the exact order in which they occur. Public ledgers not only curb corruption, but also enable very sophisticated applications ---such as cryptocurrencies and smart contracts. They stand to revolutionize the way a democratic society operates. As currently implemented, however, they scale poorly and cannot achieve their potential. Algorand is a truly democratic and efficient way to implement a public ledger. Unlike prior implementations based on proof of work, it requires a negligible amount of computation, and generates a transaction history that will not "fork" with overwhelmingly high probability. Algorand is based on (a novel and super fast) message-passing Byzantine agreement. For concreteness, we shall describe Algorand only as a money platform.},
	number = {{arXiv}:1607.01341},
	publisher = {{arXiv}},
	author = {Chen, Jing and Micali, Silvio},
	urldate = {2023-06-06},
	date = {2017-05-26},
	eprinttype = {arxiv},
	eprint = {1607.01341 [cs]},
	keywords = {Computer Science - Cryptography and Security, Computer Science - Distributed, Parallel, and Cluster Computing},
	file = {arXiv Fulltext PDF:/home/denis/Zotero/storage/SE5BD2TM/Chen and Micali - 2017 - Algorand.pdf:application/pdf;arXiv.org Snapshot:/home/denis/Zotero/storage/YPGVVHWC/1607.html:text/html},
}

@online{noauthor_abi_nodate-1,
	title = {{ABI} Support — {PyTeal} documentation},
	url = {https://pyteal.readthedocs.io/en/stable/abi.html?highlight=parameters},
	urldate = {2023-06-13},
	file = {ABI Support — PyTeal documentation:/home/denis/Zotero/storage/PVKMP5M7/abi.html:text/html},
}

@inproceedings{groce_echidna-parade_2021,
	location = {Virtual Denmark},
	title = {echidna-parade: a tool for diverse multicore smart contract fuzzing},
	isbn = {978-1-4503-8459-9},
	url = {https://dl.acm.org/doi/10.1145/3460319.3469076},
	doi = {10.1145/3460319.3469076},
	shorttitle = {echidna-parade},
	abstract = {Echidna is a widely used fuzzer for Ethereum Virtual Machine ({EVM}) compatible blockchain smart contracts that generates transaction sequences of calls to smart contracts. While Echidna is an essentially single-threaded tool, it is possible for multiple Echidna processes to communicate by use of a shared transaction sequence corpus. Echidna provides a very large variety of configuration options, since each smart contract may be best-tested by a non-default configuration, and different faults or coverage targets within a single contract may also have differing ideal configurations. This paper presents echidna-parade, a tool that provides pushbutton multicore fuzzing using Echidna as an underlying fuzzing engine, and automatically provides sophisticated diversification of configurations. Even without using multiple cores, echidna-parade can improve the effectiveness of fuzzing with Echidna, due to the advantages provided by multiple types of test configuration diversity. Using echidna-parade with multiple cores can produce significantly better results than Echidna, in less time.},
	eventtitle = {{ISSTA} '21: 30th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis},
	pages = {658--661},
	booktitle = {Proceedings of the 30th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis},
	publisher = {{ACM}},
	author = {Groce, Alex and Grieco, Gustavo},
	urldate = {2023-06-29},
	date = {2021-07-11},
	langid = {english},
	file = {Groce and Grieco - 2021 - echidna-parade a tool for diverse multicore smart.pdf:/home/denis/Zotero/storage/TFK2Y5AV/Groce and Grieco - 2021 - echidna-parade a tool for diverse multicore smart.pdf:application/pdf},
}

@article{gao_checking_2021,
	title = {Checking Smart Contracts with Structural Code Embedding},
	volume = {47},
	issn = {0098-5589, 1939-3520, 2326-3881},
	url = {http://arxiv.org/abs/2001.07125},
	doi = {10.1109/TSE.2020.2971482},
	abstract = {Smart contracts have been increasingly used together with blockchains to automate financial and business transactions. However, many bugs and vulnerabilities have been identified in many contracts which raises serious concerns about smart contract security, not to mention that the blockchain systems on which the smart contracts are built can be buggy. Thus, there is a significant need to better maintain smart contract code and ensure its high reliability. In this paper, we propose an automated approach to learn characteristics of smart contracts in Solidity, which is useful for clone detection, bug detection and contract validation on smart contracts. Our new approach is based on word embeddings and vector space comparison. We parse smart contract code into word streams with code structural information, convert code elements (e.g., statements, functions) into numerical vectors that are supposed to encode the code syntax and semantics, and compare the similarities among the vectors encoding code and known bugs, to identify potential issues. We have implemented the approach in a prototype, named {SmartEmbed}. Results show that our tool can effectively identify many repetitive instances of Solidity code, where the clone ratio is around 90{\textbackslash}\%. Code clones such as type-{III} or even type-{IV} semantic clones can also be detected accurately. Our tool can identify more than 1000 clone related bugs based on our bug databases efficiently and accurately. Our tool can also help to efficiently validate any given smart contract against a known set of bugs, which can help to improve the users' confidence in the reliability of the contract. The anonymous replication packages can be accessed at: https://drive.google.com/file/d/1kauLT3y2IiHPkUlVx4FSTda-{dVAyL}4za/view?usp=sharing, and evaluated it with more than 22,000 smart contracts collected from the Ethereum blockchain.},
	pages = {2874--2891},
	number = {12},
	journaltitle = {{IEEE} Transactions on Software Engineering},
	shortjournal = {{IIEEE} Trans. Software Eng.},
	author = {Gao, Zhipeng and Jiang, Lingxiao and Xia, Xin and Lo, David and Grundy, John},
	urldate = {2023-07-12},
	date = {2021-12-01},
	eprinttype = {arxiv},
	eprint = {2001.07125 [cs]},
	keywords = {Computer Science - Software Engineering},
	file = {arXiv.org Snapshot:/home/denis/Zotero/storage/GPDAIPNU/2001.html:text/html;Full Text PDF:/home/denis/Zotero/storage/AYD37VVB/Gao et al. - 2021 - Checking Smart Contracts with Structural Code Embe.pdf:application/pdf},
}

@online{noauthor_algorand_nodate,
	title = {Algorand ({ALGO}) On-Chain Analytics \& Charts},
	url = {https://app.intotheblock.com/coin/ALGO/deep-dive?group=financials&chart=avgTrxSize},
	urldate = {2023-07-15},
	file = {Algorand (ALGO) On-Chain Analytics & Charts:/home/denis/Zotero/storage/IHPD9CP6/deep-dive.html:text/html},
}

@article{nakamoto_bitcoin_2008,
	title = {Bitcoin: A Peer-to-Peer Electronic Cash System},
	abstract = {A purely peer-to-peer version of electronic cash would allow online payments to be sent directly from one party to another without going through a financial institution. Digital signatures provide part of the solution, but the main benefits are lost if a trusted third party is still required to prevent double-spending. We propose a solution to the double-spending problem using a peer-to-peer network. The network timestamps transactions by hashing them into an ongoing chain of hash-based proof-of-work, forming a record that cannot be changed without redoing the proof-of-work. The longest chain not only serves as proof of the sequence of events witnessed, but proof that it came from the largest pool of {CPU} power. As long as a majority of {CPU} power is controlled by nodes that are not cooperating to attack the network, they'll generate the longest chain and outpace attackers. The network itself requires minimal structure. Messages are broadcast on a best effort basis, and nodes can leave and rejoin the network at will, accepting the longest proof-of-work chain as proof of what happened while they were gone.},
	author = {Nakamoto, Satoshi},
	date = {2008},
	langid = {english},
	file = {Nakamoto - Bitcoin A Peer-to-Peer Electronic Cash System.pdf:/home/denis/Zotero/storage/F2ZEN5XU/Nakamoto - Bitcoin A Peer-to-Peer Electronic Cash System.pdf:application/pdf},
}

@inproceedings{szabo_smart_1996,
	title = {Smart Contracts: Building Blocks for Digital Markets},
	url = {https://www.semanticscholar.org/paper/Smart-Contracts%3A-Building-Blocks-for-Digital-Szabo/9b6cd3fe0bf5455dd44ea31422d015b003b5568f},
	shorttitle = {Smart Contracts},
	abstract = {The contract, a set of promises agreed to in a "meeting of the minds", is the traditional way to formalize a relationship. While contracts are primarily used in business relationships (the focus of this article), they can also involve personal relationships such as marraiges. Contracts are also important in politics, not only because of "social contract" theories but also because contract enforcement has traditionally been considered a basic function of capitalist governments.},
	author = {Szabo, Nick},
	urldate = {2023-07-25},
	date = {1996},
	file = {Full Text PDF:/home/denis/Zotero/storage/HID8QZ9B/Szabo - 2018 - Smart Contracts Building Blocks for Digital Marke.pdf:application/pdf},
}

@article{buterin_ethereum_2014,
	title = {Ethereum: A Next-Generation Smart Contract and Decentralized Application Platform.},
	author = {Buterin, Vitalik},
	date = {2014},
	langid = {english},
	file = {Buterin - Ethereum A Next-Generation Smart Contract and Dec.pdf:/home/denis/Zotero/storage/9I7NMY87/Buterin - Ethereum A Next-Generation Smart Contract and Dec.pdf:application/pdf},
}
